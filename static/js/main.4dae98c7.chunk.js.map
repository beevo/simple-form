{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Results","username","password","validated","errorMessage","App","useState","setUsername","setPassword","confirmPassword","setConfirmPassword","setValidated","submitted","setSubmitted","setErrorMessage","className","onSubmit","e","preventDefault","length","handleSubmit","type","onChange","target","value","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAIMA,G,MAAU,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,aAC/C,OAAGD,EAEC,kDAAuB,6BAAvB,cAAwCF,EAAxC,eAA8DC,EAA9D,KAIA,sCAAYE,EAAZ,OAgESC,EA3DH,WAAM,MAGgBC,mBAAS,IAHzB,mBAGTL,EAHS,KAGCM,EAHD,OAIgBD,mBAAS,IAJzB,mBAITJ,EAJS,KAICM,EAJD,OAK8BF,mBAAS,IALvC,mBAKTG,EALS,KAKQC,EALR,OAMkBJ,oBAAS,GAN3B,mBAMTH,EANS,KAMEQ,EANF,OAOkBL,oBAAS,GAP3B,mBAOTM,EAPS,KAOEC,EAPF,OAQwBP,mBAAS,MARjC,mBAQTF,EARS,KAQKU,EARL,KA0BhB,OACE,yBAAKC,UAAU,OACb,2CAGA,0BAAMC,SAAU,SAACC,GAAD,OArBC,SAACA,GACpBA,EAAEC,iBACFL,GAAa,GACTZ,EAASkB,OAEHjB,EAEAO,EAEDP,IAAaO,EACpBK,EAAgB,mFAEhBH,GAAa,GAJbG,EAAgB,uEAFhBA,EAAgB,uDAFhBA,EAAgB,uDAiBOM,CAAaH,KAClC,2BACEI,KAAK,OACLC,SAAU,SAACL,GAAD,OAAOV,EAAYU,EAAEM,OAAOC,QACtCC,YAAY,aACd,2BACEJ,KAAK,WACLC,SAAU,SAACL,GAAD,OAAOT,EAAYS,EAAEM,OAAOC,QACtCC,YAAY,aACd,2BACEJ,KAAK,WACLC,SAAU,SAACL,GAAD,OAAOP,EAAmBO,EAAEM,OAAOC,QAC7CC,YAAY,qBACd,4BAAQJ,KAAK,UAAb,aAGAT,EACE,kBAAC,EAAD,CACEX,SAAUA,EACVC,SAAUA,EACVE,aAAcA,EACdD,UAAWA,IAEX,OC1DQuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4dae98c7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\n// Handle display of results or error messages\nconst Results = ({username, password, validated, errorMessage}) => {\n  if(validated){\n    return (\n      <p> Form is validated. <br/> Username: {username}. Password: {password} </p>\n    )\n  }else{\n    return (\n      <p> Error: {errorMessage} </p>\n    )\n  }\n}\n\nconst App = () => {\n\n  // inititate useState hooks\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [validated, setValidated] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const handleSubmit = (e) => {\n    e.preventDefault(); // stops the form submission from reloading the page\n    setSubmitted(true);\n    if(!username.length){\n      setErrorMessage(\"Username cannot be blank. Please submit a username.\");\n    }else if(!password){\n      setErrorMessage(\"Password cannot be blank. Please submit a password.\");\n    }else if(!confirmPassword){\n      setErrorMessage(\"Confirm Password cannot be blank. Please submit a confirm password.\");\n    }else if(password !== confirmPassword){\n      setErrorMessage(\"Password and confirm password do not match. Please make sure they are the same.\");\n    }else{\n      setValidated(true);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>\n        Simple Form\n      </h1>\n      <form onSubmit={(e) => handleSubmit(e)}>\n        <input\n          type=\"text\"\n          onChange={(e) => setUsername(e.target.value)}\n          placeholder=\"Username\" />\n        <input\n          type=\"password\"\n          onChange={(e) => setPassword(e.target.value)}\n          placeholder=\"Password\" />\n        <input\n          type=\"password\"\n          onChange={(e) => setConfirmPassword(e.target.value)}\n          placeholder=\"Confirm Password\" />\n        <button type=\"submit\"> Submit </button>\n      </form>\n      {\n        submitted ? (\n          <Results\n            username={username}\n            password={password}\n            errorMessage={errorMessage}\n            validated={validated}\n            />\n        ) : null\n      }\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}